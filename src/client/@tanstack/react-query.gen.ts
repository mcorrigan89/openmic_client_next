// This file is auto-generated by @hey-api/openapi-ts

import { type Options, createArtist, deleteArtist, getArtist, updateArtist, getAllArtists, getArtistsByTitle, createEvent, getCurrentEvent, addArtistToEvent, setNowPlaying, removeArtistFromEvent, setSortOrder, deleteTimeslotMarker, setTimeslotMarker, updateTimeslot, deleteEvent, getEvent, updateEvent, getEvents, sse, createUser, getUserEmail, getUser, updateUser } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { CreateArtistData, CreateArtistError, CreateArtistResponse, DeleteArtistData, DeleteArtistError, DeleteArtistResponse, GetArtistData, UpdateArtistData, UpdateArtistError, UpdateArtistResponse, GetAllArtistsData, GetArtistsByTitleData, CreateEventData, CreateEventError, CreateEventResponse, GetCurrentEventData, AddArtistToEventData, AddArtistToEventError, AddArtistToEventResponse, SetNowPlayingData, SetNowPlayingError, SetNowPlayingResponse, RemoveArtistFromEventData, RemoveArtistFromEventError, RemoveArtistFromEventResponse, SetSortOrderData, SetSortOrderError, SetSortOrderResponse, DeleteTimeslotMarkerData, DeleteTimeslotMarkerError, DeleteTimeslotMarkerResponse, SetTimeslotMarkerData, SetTimeslotMarkerError, SetTimeslotMarkerResponse, UpdateTimeslotData, UpdateTimeslotError, UpdateTimeslotResponse, DeleteEventData, DeleteEventError, DeleteEventResponse, GetEventData, UpdateEventData, UpdateEventError, UpdateEventResponse, GetEventsData, SseData, CreateUserData, CreateUserError, CreateUserResponse, GetUserEmailData, GetUserData, UpdateUserData, UpdateUserError, UpdateUserResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const createArtistQueryKey = (options: Options<CreateArtistData>) => createQueryKey('createArtist', options);

export const createArtistOptions = (options: Options<CreateArtistData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createArtist({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createArtistQueryKey(options)
    });
};

export const createArtistMutation = (options?: Partial<Options<CreateArtistData>>) => {
    const mutationOptions: UseMutationOptions<CreateArtistResponse, CreateArtistError, Options<CreateArtistData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createArtist({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteArtistMutation = (options?: Partial<Options<DeleteArtistData>>) => {
    const mutationOptions: UseMutationOptions<DeleteArtistResponse, DeleteArtistError, Options<DeleteArtistData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteArtist({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getArtistQueryKey = (options: Options<GetArtistData>) => createQueryKey('getArtist', options);

export const getArtistOptions = (options: Options<GetArtistData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getArtist({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getArtistQueryKey(options)
    });
};

export const updateArtistMutation = (options?: Partial<Options<UpdateArtistData>>) => {
    const mutationOptions: UseMutationOptions<UpdateArtistResponse, UpdateArtistError, Options<UpdateArtistData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateArtist({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllArtistsQueryKey = (options?: Options<GetAllArtistsData>) => createQueryKey('getAllArtists', options);

export const getAllArtistsOptions = (options?: Options<GetAllArtistsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllArtists({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllArtistsQueryKey(options)
    });
};

export const getArtistsByTitleQueryKey = (options?: Options<GetArtistsByTitleData>) => createQueryKey('getArtistsByTitle', options);

export const getArtistsByTitleOptions = (options?: Options<GetArtistsByTitleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getArtistsByTitle({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getArtistsByTitleQueryKey(options)
    });
};

export const createEventQueryKey = (options: Options<CreateEventData>) => createQueryKey('createEvent', options);

export const createEventOptions = (options: Options<CreateEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createEventQueryKey(options)
    });
};

export const createEventMutation = (options?: Partial<Options<CreateEventData>>) => {
    const mutationOptions: UseMutationOptions<CreateEventResponse, CreateEventError, Options<CreateEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCurrentEventQueryKey = (options?: Options<GetCurrentEventData>) => createQueryKey('getCurrentEvent', options);

export const getCurrentEventOptions = (options?: Options<GetCurrentEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCurrentEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCurrentEventQueryKey(options)
    });
};

export const addArtistToEventQueryKey = (options: Options<AddArtistToEventData>) => createQueryKey('addArtistToEvent', options);

export const addArtistToEventOptions = (options: Options<AddArtistToEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addArtistToEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addArtistToEventQueryKey(options)
    });
};

export const addArtistToEventMutation = (options?: Partial<Options<AddArtistToEventData>>) => {
    const mutationOptions: UseMutationOptions<AddArtistToEventResponse, AddArtistToEventError, Options<AddArtistToEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addArtistToEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const setNowPlayingMutation = (options?: Partial<Options<SetNowPlayingData>>) => {
    const mutationOptions: UseMutationOptions<SetNowPlayingResponse, SetNowPlayingError, Options<SetNowPlayingData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await setNowPlaying({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeArtistFromEventQueryKey = (options: Options<RemoveArtistFromEventData>) => createQueryKey('removeArtistFromEvent', options);

export const removeArtistFromEventOptions = (options: Options<RemoveArtistFromEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await removeArtistFromEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: removeArtistFromEventQueryKey(options)
    });
};

export const removeArtistFromEventMutation = (options?: Partial<Options<RemoveArtistFromEventData>>) => {
    const mutationOptions: UseMutationOptions<RemoveArtistFromEventResponse, RemoveArtistFromEventError, Options<RemoveArtistFromEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeArtistFromEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const setSortOrderMutation = (options?: Partial<Options<SetSortOrderData>>) => {
    const mutationOptions: UseMutationOptions<SetSortOrderResponse, SetSortOrderError, Options<SetSortOrderData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await setSortOrder({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteTimeslotMarkerMutation = (options?: Partial<Options<DeleteTimeslotMarkerData>>) => {
    const mutationOptions: UseMutationOptions<DeleteTimeslotMarkerResponse, DeleteTimeslotMarkerError, Options<DeleteTimeslotMarkerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTimeslotMarker({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const setTimeslotMarkerQueryKey = (options: Options<SetTimeslotMarkerData>) => createQueryKey('setTimeslotMarker', options);

export const setTimeslotMarkerOptions = (options: Options<SetTimeslotMarkerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await setTimeslotMarker({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: setTimeslotMarkerQueryKey(options)
    });
};

export const setTimeslotMarkerMutation = (options?: Partial<Options<SetTimeslotMarkerData>>) => {
    const mutationOptions: UseMutationOptions<SetTimeslotMarkerResponse, SetTimeslotMarkerError, Options<SetTimeslotMarkerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await setTimeslotMarker({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateTimeslotMutation = (options?: Partial<Options<UpdateTimeslotData>>) => {
    const mutationOptions: UseMutationOptions<UpdateTimeslotResponse, UpdateTimeslotError, Options<UpdateTimeslotData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTimeslot({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteEventMutation = (options?: Partial<Options<DeleteEventData>>) => {
    const mutationOptions: UseMutationOptions<DeleteEventResponse, DeleteEventError, Options<DeleteEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEventQueryKey = (options: Options<GetEventData>) => createQueryKey('getEvent', options);

export const getEventOptions = (options: Options<GetEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEventQueryKey(options)
    });
};

export const updateEventMutation = (options?: Partial<Options<UpdateEventData>>) => {
    const mutationOptions: UseMutationOptions<UpdateEventResponse, UpdateEventError, Options<UpdateEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEventsQueryKey = (options?: Options<GetEventsData>) => createQueryKey('getEvents', options);

export const getEventsOptions = (options?: Options<GetEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEventsQueryKey(options)
    });
};

export const sseQueryKey = (options: Options<SseData>) => createQueryKey('sse', options);

export const sseOptions = (options: Options<SseData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await sse({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: sseQueryKey(options)
    });
};

export const createUserQueryKey = (options: Options<CreateUserData>) => createQueryKey('createUser', options);

export const createUserOptions = (options: Options<CreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUserQueryKey(options)
    });
};

export const createUserMutation = (options?: Partial<Options<CreateUserData>>) => {
    const mutationOptions: UseMutationOptions<CreateUserResponse, CreateUserError, Options<CreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserEmailQueryKey = (options: Options<GetUserEmailData>) => createQueryKey('getUserEmail', options);

export const getUserEmailOptions = (options: Options<GetUserEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserEmailQueryKey(options)
    });
};

export const getUserQueryKey = (options: Options<GetUserData>) => createQueryKey('getUser', options);

export const getUserOptions = (options: Options<GetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserQueryKey(options)
    });
};

export const updateUserMutation = (options?: Partial<Options<UpdateUserData>>) => {
    const mutationOptions: UseMutationOptions<UpdateUserResponse, UpdateUserError, Options<UpdateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};