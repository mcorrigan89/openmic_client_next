// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { CreateArtistData, CreateArtistResponse, CreateArtistError, GetArtistData, GetArtistResponse, GetArtistError, GetAllArtistsData, GetAllArtistsResponse, GetAllArtistsError, GetArtistsByTitleData, GetArtistsByTitleResponse, GetArtistsByTitleError, CreateEventData, CreateEventResponse, CreateEventError, GetCurrentEventData, GetCurrentEventResponse, GetCurrentEventError, AddArtistToEventData, AddArtistToEventResponse, AddArtistToEventError, RemoveArtistFromEventData, RemoveArtistFromEventResponse, RemoveArtistFromEventError, SetSortOrderData, SetSortOrderResponse, SetSortOrderError, DeleteTimeslotData, DeleteTimeslotResponse, DeleteTimeslotError, SetTimeslotData, SetTimeslotResponse, SetTimeslotError, DeleteEventData, DeleteEventResponse, DeleteEventError, GetEventData, GetEventResponse, GetEventError, UpdateEventData, UpdateEventResponse, UpdateEventError, GetEventsData, GetEventsResponse, GetEventsError, SseData, SseResponse, SseError, CreateUserData, CreateUserResponse, CreateUserError, GetUserEmailData, GetUserEmailResponse, GetUserEmailError, GetUserData, GetUserResponse, GetUserError, UpdateUserData, UpdateUserResponse, UpdateUserError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create Artist
 */
export const createArtist = <ThrowOnError extends boolean = false>(options: Options<CreateArtistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArtistResponse, CreateArtistError, ThrowOnError>({
        url: '/artist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Artist by ID
 */
export const getArtist = <ThrowOnError extends boolean = false>(options: Options<GetArtistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArtistResponse, GetArtistError, ThrowOnError>({
        url: '/artist/{id}',
        ...options
    });
};

/**
 * Get All Artists
 */
export const getAllArtists = <ThrowOnError extends boolean = false>(options?: Options<GetAllArtistsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllArtistsResponse, GetAllArtistsError, ThrowOnError>({
        url: '/artists',
        ...options
    });
};

/**
 * Get Artists by Title
 */
export const getArtistsByTitle = <ThrowOnError extends boolean = false>(options?: Options<GetArtistsByTitleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetArtistsByTitleResponse, GetArtistsByTitleError, ThrowOnError>({
        url: '/artists/search',
        ...options
    });
};

/**
 * Create Event
 */
export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEventResponse, CreateEventError, ThrowOnError>({
        url: '/event',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Current Event
 */
export const getCurrentEvent = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentEventData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentEventResponse, GetCurrentEventError, ThrowOnError>({
        url: '/event/now',
        ...options
    });
};

/**
 * Add Artist to Event
 */
export const addArtistToEvent = <ThrowOnError extends boolean = false>(options: Options<AddArtistToEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddArtistToEventResponse, AddArtistToEventError, ThrowOnError>({
        url: '/event/{event_id}/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove Artist from Event
 */
export const removeArtistFromEvent = <ThrowOnError extends boolean = false>(options: Options<RemoveArtistFromEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoveArtistFromEventResponse, RemoveArtistFromEventError, ThrowOnError>({
        url: '/event/{event_id}/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set Sort Order
 */
export const setSortOrder = <ThrowOnError extends boolean = false>(options: Options<SetSortOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetSortOrderResponse, SetSortOrderError, ThrowOnError>({
        url: '/event/{event_id}/sort',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Timeslot
 */
export const deleteTimeslot = <ThrowOnError extends boolean = false>(options: Options<DeleteTimeslotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTimeslotResponse, DeleteTimeslotError, ThrowOnError>({
        url: '/event/{event_id}/timeslot',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set Timeslot
 */
export const setTimeslot = <ThrowOnError extends boolean = false>(options: Options<SetTimeslotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetTimeslotResponse, SetTimeslotError, ThrowOnError>({
        url: '/event/{event_id}/timeslot',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Event
 */
export const deleteEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEventResponse, DeleteEventError, ThrowOnError>({
        url: '/event/{id}',
        ...options
    });
};

/**
 * Event by ID
 */
export const getEvent = <ThrowOnError extends boolean = false>(options: Options<GetEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventResponse, GetEventError, ThrowOnError>({
        url: '/event/{id}',
        ...options
    });
};

/**
 * Update Event
 */
export const updateEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEventResponse, UpdateEventError, ThrowOnError>({
        url: '/event/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upcoming Events
 */
export const getEvents = <ThrowOnError extends boolean = false>(options?: Options<GetEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEventsResponse, GetEventsError, ThrowOnError>({
        url: '/events',
        ...options
    });
};

/**
 * Server sent events example
 */
export const sse = <ThrowOnError extends boolean = false>(options: Options<SseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SseResponse, SseError, ThrowOnError>({
        url: '/sse/{event_id}',
        ...options
    });
};

/**
 * Create user
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        url: '/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a user by email
 */
export const getUserEmail = <ThrowOnError extends boolean = false>(options: Options<GetUserEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserEmailResponse, GetUserEmailError, ThrowOnError>({
        url: '/user/email/{email}',
        ...options
    });
};

/**
 * Get a user by ID
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        url: '/user/{id}',
        ...options
    });
};

/**
 * Update user
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
        url: '/user/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};